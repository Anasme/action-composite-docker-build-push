name: "action-helm-service-install"
description: "build and push docker image with dockerfile"
inputs:
  batch_profile:
    description: “Username for image registry”
    required: false
  schedule:
    description: “Password for image registry”
    required: false
  cron:
    description: "Enable Kubernetes CronJob"
    required: false
  release_name:
    description: "Personalize release name (same name as values name in helm folder)"
    required: false
  token:
    description: "Token (PAT) to pull helm chart repo"
    required: true
  scw_secret_token: 
    description: "specific scw token to retrieve kubeconfig"
    required: true
runs:
  using: "composite"
  steps:
    - name: Set SCW cluster name
      id: clusterName
      run: |
        ## Set Kube cluster name by env
        case ${GITHUB_REF} in
          refs/heads/ops) 
            KUBE_CLUSTER_NAME=ops_kube;;
          refs/heads/master) 
            KUBE_CLUSTER_NAME=dev_kube;;
          refs/heads/demo) 
            KUBE_CLUSTER_NAME=dev_kube;;
          refs/heads/prod) 
            KUBE_CLUSTER_NAME=production_kube;;
        esac
        echo "Kube cluster name is set as $KUBE_CLUSTER_NAME"

    # - name: Get private repo action-kubeconfig
    #   uses: actions/checkout@v2
    #   with:
    #     repository: gear-group/action-kubeconfig
    #     ref: master
    #     token: ${{ secrets.REPOS_TOKEN }}
    #     path: .github/actions/action-kubeconfig

    # - name: Retrieve kubeconfig file
    #   uses: ./.github/actions/action-kubeconfig
    #   with:
    #     kube_cluster_name: ${KUBE_CLUSTER_NAME}
    #     scw_secret_token: ${{ inputs.scw_secret_token }}

    - name: Install helm binaries
      uses: azure/setup-helm@v1
      with:
        version: '3.7.1'
      id: install
      
    - name: Install/Update yuzer helm charts repo
      run: |
        echo "helm repo add --username yuzer-build --password ${{ inputs.scw_secret_token }} yuzer-helm-charts-repo https://raw.githubusercontent.com/anasme/yuzer-helm-chart-repo/repo --force-update"
      shell: bash

    - name: Deploy helm chart yuzer-service-chart
      run: |
        ## Setup cronJob batch_profile & schedule
        if [[ -n "${{ inputs.cron }}" ]]; then
          declare -a batch_profile=(${{ inputs.batch_profile }})
          declare -a schedule=(${{ inputs.schedule }})
        fi

        ## Set image tag
        TAG_SHORTREF=${GITHUB_SHA::8}
        echo "Dockerimage tag is $TAG_SHORTREF"  

        ## Set namespace
        case ${GITHUB_REF} in
          refs/heads/ops) 
            NAMESPACE=dms-ops
            ENV=ops;;
          refs/heads/master) 
            NAMESPACE=dms-dev
            ENV=dev;;
          refs/heads/demo) 
            NAMESPACE=dms-demo
            ENV=demo;;
          refs/heads/prod) 
            NAMESPACE=dms-production
            ENV=prod;;
        esac
        echo "Namespace is set as $NAMESPACE with environnement $ENV"

        ## Set release-name
        RELEASE_NAME=${{ github.event.repository.name }}
        if [[ -n "${{ inputs.release_name }}" ]]; then
          RELEASE_NAME=${{inputs.release_name}}
        fi
        if [[ -n "${{ inputs.cron }}" ]]; then
          RELEASE_NAME=${RELEASE_NAME}-batch
        fi
        echo "The release name is $RELEASE_NAME"

        ## Set value file
        HELM_VALUES_FILE=${RELEASE_NAME}-values.yaml
        echo "The values file used will be $HELM_VALUES_FILE"

        # Launch install
        if [[ -n "${{ inputs.cron }}" ]]; then
          for i in "${!batch_profile[@]}"; do
              echo "helm upgrade --install $RELEASE_NAME yuzer-helm-charts/yuzer-service-chart -f helm/global-values.yaml -f helm/${ENV}/${HELM_VALUES_FILE} --set image.tag=$TAG_SHORTREF --set cronProfile=${batch_profile[i]} --set schedule=\"${schedule[i]}\"  --kubeconfig /tmp/kubeconfig.yml --dry-run --debug -n $NAMESPACE"
          done
        else
          echo "helm upgrade --install $RELEASE_NAME yuzer-helm-charts/yuzer-service-chart -f helm/global-values.yaml -f helm/${ENV}/${HELM_VALUES_FILE} --set image.tag=$TAG_SHORTREF --kubeconfig /tmp/kubeconfig.yml --dry-run --debug -n $NAMESPACE"
        fi
      shell: bash
      