name: "action-composite-docker-build-push"
description: "build and push docker image with dockerfile"
inputs:
  batch_profile:
    description: “Username for image registry”
    required: true
  schedule:
    description: “Password for image registry”
    required: true
  cron:
    description: "toto"
    required: false
runs:
  using: "composite"
  steps:
    - name: Prepare
      id: prep
      run: |
        declare -a batch_profile=(${{inputs.batch_profile}})
        declare -a schedule=(${{inputs.schedule}})
        ## Set image tag
        TAG_SHORTREF=${GITHUB_SHA::8}
        echo ::set-output name=tag_shortref::${TAG_SHORTREF}
        ## Set namespace
        case ${GITHUB_REF} in
          refs/heads/ops) NAMESPACE=dms-ops;;
          refs/heads/master) NAMESPACE=dms-dev;;
          refs/heads/demo) NAMESPACE=dms-demo;;
          refs/heads/prod) NAMESPACE=dms-production;;
        esac
        echo ::set-output name=namespace::${NAMESPACE}
        ## Set release-name
        # echo ::set-output name=release-name::${{ github.event.repository.name }}
        # echo "The RELEASE name is ${{ steps.prep.outputs.release-name }}"
        RELEASE_NAME="${{ github.event.repository.name }}"
        ## Set value file
        if [[ ${{inputs.batch_profile}} == true ]]; then
            HELM_VALUES_FILE=service-name-cronjob-values.yaml
            RELEASE_NAME=${RELEASE_NAME}-batch
            else
            HELM_VALUES_FILE=service-name-values.yaml
        fi
        echo $HELM_VALUES_FILE
        for i in "${!batch_profile[@]}"; do
            echo "helm upgrade --install $RELEASE_NAME yuzer-helm-charts/yuzer-service-chart --set image.tag=$TAG_SHORTREF --set cronProfile=${batch_profile[i]} --set schedule=\"${schedule[i]}\"  --kubeconfig /tmp/kubeconfig.yml --dry-run --debug -n dms-$env"
        done
      shell: bash
    # - name: check output
    #   run: |
    #     echo "The RELEASE name is ${{ steps.prep.outputs.dockerfile }}"
    #     echo "The image name is ${{ steps.prep.outputs.image_name }}"
    #     echo "The tag with short sha is ${{ steps.prep.outputs.tag_sha }}"        
    #     echo "The tags are ${{ steps.prep.outputs.tags }}"
    #   shell: bash